#! IDP-Z3 0.9.2
vocabulary {
    type Row := {0..11}// type
    type Col := {0..11}// type
    type Value := {0..1} // type
    cellValue: (Row * Col) -> Value // function
    initialValue: (Row * Col * Value) -> Bool
    horizontalEdge, verticalEdge: (Row * Col * Row * Col) -> Bool
}

structure {
    initialValue := {(0, 0, 1), (0, 4, 1), (0, 7, 1), (1, 9, 0), (2, 1, 1), (2, 3, 1), (3, 3, 1), (3, 6, 0), (3, 9, 1), (3, 10, 1), (4, 0, 0), (4, 1, 0), (4, 6, 0), (4, 11, 0), (5, 1, 0), (5, 8, 1), (6, 3, 1), (6, 7, 1), (6, 8, 1), (7, 4, 0), (7, 5, 0), (8, 6, 1), (8, 9, 0), (8, 11, 0), (9, 1, 0), (9, 2, 0), (10, 0, 0), (10, 3, 1), (10, 6, 0), (10, 9, 0), (10, 10, 0), (11, 4, 0), (11, 11, 1)}.
}

theory {
    // Set the initial values.
    !r in Row, c in Col, v in Value: initialValue(r, c, v) => cellValue(r, c) = v.
    { // define the conditions for a horizontal and vertical egde
        !r1,r2 in Row: !c1,c2 in Col: horizontalEdge(r1,c1,r2,c2) <- (r1 = r2 & c1 = c2+1 ).
        !r1,r2 in Row: !c1,c2 in Col: verticalEdge(r1,c1,r2,c2) <- (r1 = r2+1 & c1 = c2 ).
    }
    // state that 3 cell with 2 of the same type of edge connecting them, should have at least 1 different number
    !r1,r2,r3 in Row: !c1,c2,c3 in Col: horizontalEdge(r1,c1,r2,c2) & horizontalEdge(r2,c2,r3,c3) => (cellValue(r1,c1)~=cellValue(r2,c2) | cellValue(r2,c2)~=cellValue(r3,c3)).
    !r1,r2,r3 in Row: !c1,c2,c3 in Col: verticalEdge(r1,c1,r2,c2) & verticalEdge(r2,c2,r3,c3) => (cellValue(r1,c1)~=cellValue(r2,c2) | cellValue(r2,c2)~=cellValue(r3,c3)).
}


procedure main() {
    pretty_print(model_expand(T,S,max=1))
    // pretty_print(Theory(T,S).to_smt_lib())
}